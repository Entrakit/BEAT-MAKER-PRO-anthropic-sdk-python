import React, { useState, useRef } from 'react';

const AudioApp = () => {
  const [activeTab, setActiveTab] = useState('beatMaker');
  const [tracks, setTracks] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [tempo, setTempo] = useState(120);
  const audioContext = useRef(null);

  // Initialize audio context
  const initAudio = () => {
    audioContext.current = new (window.AudioContext || window.webkitAudioContext)();
  };

  // Add a new track
  const addTrack = () => {
    setTracks([...tracks, { id: Date.now(), name: `Track ${tracks.length + 1}`, volume: 0.5 }]);
  };

  // Remove a track
  const removeTrack = (id) => {
    setTracks(tracks.filter(track => track.id !== id));
  };

  // Update track volume
  const updateVolume = (id, volume) => {
    setTracks(tracks.map(track => 
      track.id === id ? { ...track, volume } : track
    ));
  };

  // Toggle play/pause
  const togglePlay = () => {
    if (!audioContext.current) {
      initAudio();
    }
    setIsPlaying(!isPlaying);
    // Here you would implement actual audio playback logic
  };

  const BeatMaker = () => (
    <div>
      <h2 className="text-2xl font-bold mb-4">Beat Maker</h2>
      <div className="grid grid-cols-4 gap-2">
        {[...Array(16)].map((_, index) => (
          <button
            key={index}
            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
            onClick={() => console.log(`Beat ${index + 1} clicked`)}
          >
            Beat {index + 1}
          </button>
        ))}
      </div>
    </div>
  );

  const ADE = () => (
    <div>
      <h2 className="text-2xl font-bold mb-4">Audio Development Environment</h2>
      <button 
        onClick={addTrack}
        className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 mb-4"
      >
        Add Track
      </button>
      {tracks.map(track => (
        <div key={track.id} className="bg-white rounded-lg shadow p-4 mb-4">
          <div className="flex justify-between items-center mb-2">
            <h3 className="font-semibold">{track.name}</h3>
            <button 
              onClick={() => removeTrack(track.id)}
              className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600"
            >
              Remove
            </button>
          </div>
          <input
            type="range"
            min="0"
            max="1"
            step="0.01"
            value={track.volume}
            onChange={(e) => updateVolume(track.id, Number(e.target.value))}
            className="w-full"
          />
        </div>
      ))}
    </div>
  );

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      <header className="flex justify-between items-center mb-6">
        <div className="flex items-center">
          {/* Logo placeholder - replace with your actual logo */}
          <div className="w-10 h-10 bg-blue-500 rounded-full mr-2"></div>
          <h1 className="text-3xl font-bold">AudioCraft</h1>
        </div>
        <div className="space-x-4">
          <button
            onClick={() => setActiveTab('beatMaker')}
            className={`px-4 py-2 rounded ${activeTab === 'beatMaker' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
          >
            Beat Maker
          </button>
          <button
            onClick={() => setActiveTab('ade')}
            className={`px-4 py-2 rounded ${activeTab === 'ade' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
          >
            ADE
          </button>
        </div>
      </header>

      <div className="mb-4">
        <button 
          onClick={togglePlay}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          {isPlaying ? 'Pause' : 'Play'}
        </button>
        <input
          type="number"
          value={tempo}
          onChange={(e) => setTempo(Number(e.target.value))}
          className="ml-4 p-2 border rounded"
          min="1"
          max="300"
        />
        <span className="ml-2">BPM</span>
      </div>

      {activeTab === 'beatMaker' ? <BeatMaker /> : <ADE />}

      <footer className="mt-8 text-center text-gray-500">
        Â© 2024 AudioCraft. All rights reserved.
      </footer>
    </div>
  );
};

export default AudioApp;
